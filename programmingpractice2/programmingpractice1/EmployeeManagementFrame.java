/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package programmingpractice1;

import javax.swing.JOptionPane;

/**
 *
 * @author klzpo
 */
public class EmployeeManagementFrame extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeManagementFrame
     */
    
    private DS_EmployeeList_Array employeeList = new DS_EmployeeList_Array();
    private int currentIndex = -1; // To keep track of the current employee for navigation
    private boolean isEmployeeListShown = false;
    
    public EmployeeManagementFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameField = new javax.swing.JTextField();
        positionField = new javax.swing.JTextField();
        ageField = new javax.swing.JTextField();
        idField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        prevBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        showAllBtn = new javax.swing.JButton();
        removeLastBtn = new javax.swing.JButton();
        sortByIDBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Employee Management System");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel3.setText("Position");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel4.setText("Age");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel5.setText("ID");

        addBtn.setText("Add Employee");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("Remove Current Employee");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        prevBtn.setText("<");
        prevBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevBtnActionPerformed(evt);
            }
        });

        nextBtn.setText(">");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        showAllBtn.setText("Show All Employee");
        showAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllBtnActionPerformed(evt);
            }
        });

        removeLastBtn.setText("Remove Last Employee");
        removeLastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLastBtnActionPerformed(evt);
            }
        });

        sortByIDBtn.setText("Sort by ID");
        sortByIDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByIDBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(positionField, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                    .addComponent(ageField)
                                    .addComponent(idField)
                                    .addComponent(nameField))))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(removeLastBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(prevBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showAllBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sortByIDBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(positionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(prevBtn)
                    .addComponent(nextBtn)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showAllBtn)
                    .addComponent(removeLastBtn)
                    .addComponent(removeBtn)
                    .addComponent(sortByIDBtn))
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        if (currentIndex >= 0 && currentIndex < employeeList.getSize()) {
            Employee currentEmployee = employeeList.searchbyIndex(currentIndex);

            // Confirm removal
            int response = JOptionPane.showConfirmDialog(this, 
                "Are you sure you want to remove the following employee?\n\n" + currentEmployee.toString(),
                "Confirm Removal", 
                JOptionPane.YES_NO_OPTION);

            if (response == JOptionPane.YES_OPTION) {
                // Remove the employee at the currentIndex
                employeeList.removebyIndex(currentIndex);

                // Adjust currentIndex
                if (employeeList.getSize() > 0) {
                    // Update currentIndex to be the previous employee if at the end
                    if (currentIndex >= employeeList.getSize()) {
                        currentIndex = employeeList.getSize() - 1;
                    }
                    updateEmployeeList();
                    refreshFields(); // Update all fields with the new data
                } else {
                    // No employees left
                    currentIndex = -1;
                    updateEmployeeList();
                    refreshFields(); // Clear fields if no employees
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No employee selected for removal.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        try {
            String name = nameField.getText();
            String position = positionField.getText();
            byte age = Byte.parseByte(ageField.getText());
            int id = Integer.parseInt(idField.getText());

            // Check if the ID already exists
            Employee existingEmployee = employeeList.searchbyID(id);
            if (existingEmployee != null) {
                JOptionPane.showMessageDialog(this, "An employee with this ID already exists.", "Duplicate ID", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // If the ID is unique, add the employee
            Employee employee = new Employee(name, position, age, id);
            employeeList.addItem(employee);
            currentIndex = employeeList.getSize() - 1; // Set to the index of the newly added employee

            updateEmployeeList();
            refreshFields(); // Update all fields with the new data
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter valid data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        String searchTerm = JOptionPane.showInputDialog(this, "Enter name, ID, or index to search:");

        if (searchTerm != null && !searchTerm.trim().isEmpty()) {
            try {
                int num = Integer.parseInt(searchTerm.trim());

                // Ask if it's an ID or an Index
                String[] options = {"ID", "Index"};
                int choice = JOptionPane.showOptionDialog(this, "Is this an ID or an Index?", 
                                "Choose Search Type", JOptionPane.DEFAULT_OPTION, 
                                JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

                Employee employee = null;
                if (choice == 0) { // Search by ID
                    employee = employeeList.searchbyID(num);
                } else if (choice == 1) { // Search by Index
                    employee = employeeList.searchbyIndex(num);
                }

                if (employee != null) {
                    JOptionPane.showMessageDialog(this, employee.toString(), "Employee Found", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    String searchType = (choice == 0) ? "ID" : "Index";
                    JOptionPane.showMessageDialog(this, "Employee with " + searchType + " " + num + " not found.", "Not Found", JOptionPane.WARNING_MESSAGE);
                }

            } catch (NumberFormatException e) {
                // If it's not a number, assume it's a name
                Employee employee = employeeList.searchbyName(searchTerm.trim());
                if (employee != null) {
                    JOptionPane.showMessageDialog(this, employee.toString(), "Employee Found", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Employee with name " + searchTerm + " not found.", "Not Found", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void prevBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBtnActionPerformed
        if (employeeList.getSize() > 0 && currentIndex > 0) {
            currentIndex--;
            Employee employee = employeeList.searchbyIndex(currentIndex);
            jTextArea1.setText(employee.toString());
            refreshFields(); // Update all fields with the new data
        } else {
            JOptionPane.showMessageDialog(this, "No previous employee.", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_prevBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        if (employeeList.getSize() > 0 && currentIndex < employeeList.getSize() - 1) {
            currentIndex++;
            Employee employee = employeeList.searchbyIndex(currentIndex);
            jTextArea1.setText(employee.toString());
            refreshFields(); // Update all fields with the new data
        } else {
            JOptionPane.showMessageDialog(this, "No next employee.", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_nextBtnActionPerformed

    private void showAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllBtnActionPerformed
        if (employeeList.getSize() > 0) {
            // Get all employee information
            String allEmployees = employeeList.toString();
            // Display all employees in the text area
            jTextArea1.setText(allEmployees);

            // Set flag to true and enable the sort button
            isEmployeeListShown = true;
            sortByIDBtn.setEnabled(true); // Enable sort button
        } else {
            JOptionPane.showMessageDialog(this, "No employees to display.", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_showAllBtnActionPerformed

    private void removeLastBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLastBtnActionPerformed
        employeeList.remove(); // Remove the last employee

        // Optionally update the UI or display a message
        jTextArea1.setText(employeeList.toString()); // Update the text area to show the updated list of employees

        // Show a confirmation message
        JOptionPane.showMessageDialog(this, "Last employee removed successfully.", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_removeLastBtnActionPerformed

    private void sortByIDBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByIDBtnActionPerformed
        if (isEmployeeListShown) {
            // Prompt user to select sorting technique
            String[] options = {"Selection", "Double Selection", "Bubble", "Insertion", "Quick", "Merge"};
            String technique = (String) JOptionPane.showInputDialog(
                this, 
                "Choose sorting technique:", 
                "Sort by ID", 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                options, 
                options[0]
            );

            if (technique != null) {
                // Create a sorted list of employees
                DS_EmployeeList_Sorted sortedList = new DS_EmployeeList_Sorted();

                // Copy existing employees to the new sorted list
                for (int i = 0; i < employeeList.getSize(); i++) {
                    sortedList.addItem(employeeList.searchbyIndex(i));
                }

                // Sort by ID using the selected technique
                sortedList.sortByID(technique);

                // Update the employeeList with sorted data
                employeeList = sortedList;

                // Update the text area with sorted employee data
                jTextArea1.setText(employeeList.toString());

                // Disable sorting button after sorting
                sortByIDBtn.setEnabled(false);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please show all employees before sorting.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_sortByIDBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void updateEmployeeList() {
        jTextArea1.setText(employeeList.toString());
    }
    
    private void refreshFields() {
        if (currentIndex >= 0 && currentIndex < employeeList.getSize()) {
            // Get the current employee
            Employee employee = employeeList.searchbyIndex(currentIndex);

            // Update text fields with employee data
            nameField.setText(employee.getName());
            positionField.setText(employee.getPosition());
            ageField.setText(Byte.toString(employee.getAge()));
            idField.setText(Integer.toString(employee.getID()));

            // Update text area with employee data
            jTextArea1.setText(employee.toString());
        } else {
            // If no employee is selected, clear all fields
            nameField.setText("");
            positionField.setText("");
            ageField.setText("");
            idField.setText("");
            jTextArea1.setText("No employee data.");
        }
    }


    private void toggleButtons(boolean enableSortButton) {
        sortByIDBtn.setEnabled(enableSortButton);
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeManagementFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField ageField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton nextBtn;
    private javax.swing.JTextField positionField;
    private javax.swing.JButton prevBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton removeLastBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton showAllBtn;
    private javax.swing.JButton sortByIDBtn;
    // End of variables declaration//GEN-END:variables
}
